/* OpenGL extensions
 *
 * Copyright (C) 2003-2005, Alexander Zaprjagaev <frustum@frustum.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "GLExt.h"

#ifndef _WIN32
#include <GL/glx.h>
#endif

// stencil
PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT = NULL;
PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI = NULL;
PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI = NULL;

// depth bounds test
PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT = NULL;

// textures
PFNGLACTIVETEXTUREARBPROC glActiveTexture = NULL;
PFNGLTEXIMAGE3DPROC glTexImage3D = NULL;

// arb programs
PFNGLGENPROGRAMSARBPROC glGenProgramsARB = NULL;
PFNGLBINDPROGRAMARBPROC glBindProgramARB = NULL;
PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB = NULL;
PFNGLPROGRAMSTRINGARBPROC glProgramStringARB = NULL;
PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB = NULL;
PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB = NULL;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB = NULL;

// nv programs
PFNGLGENPROGRAMSNVPROC glGenProgramsNV = NULL;
PFNGLBINDPROGRAMNVPROC glBindProgramNV = NULL;
PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV = NULL;
PFNGLLOADPROGRAMNVPROC glLoadProgramNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV = NULL;
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV = NULL;

// attrib arrays
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB = NULL;
PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB = NULL;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB = NULL;
PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB = NULL;
PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB = NULL;
PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB = NULL;
PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB = NULL;
PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB = NULL;
PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB = NULL;
PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB = NULL;
PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB = NULL;

// vertex buffer object
PFNGLGENBUFFERSARBPROC glGenBuffersARB = NULL;
PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB = NULL;
PFNGLBINDBUFFERARBPROC glBindBufferARB = NULL;
PFNGLBUFFERDATAARBPROC glBufferDataARB = NULL;
PFNGLMAPBUFFERARBPROC glMapBufferARB = NULL;
PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB = NULL;

// occlision query
PFNGLGENQUERIESARBPROC glGenQueriesARB = NULL;
PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB = NULL;
PFNGLBEGINQUERYARBPROC glBeginQueryARB = NULL;
PFNGLENDQUERYARBPROC glEndQueryARB = NULL;
PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB = NULL;

// glsl
PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB = NULL;
PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB = NULL;
PFNGLSHADERSOURCEARBPROC glShaderSourceARB = NULL;
PFNGLCOMPILESHADERARBPROC glCompileShaderARB = NULL;
PFNGLATTACHOBJECTARBPROC glAttachObjectARB = NULL;
PFNGLDELETEOBJECTARBPROC glDeleteObjectARB = NULL;
PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB = NULL;
PFNGLLINKPROGRAMARBPROC glLinkProgramARB = NULL;
PFNGLGETINFOLOGARBPROC glGetInfoLogARB = NULL;
PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB = NULL;
PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB = NULL;
PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB = NULL;
PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB = NULL;
PFNGLUNIFORM1IARBPROC glUniform1iARB = NULL;
PFNGLUNIFORM1FARBPROC glUniform1fARB = NULL;
PFNGLUNIFORM1FVARBPROC glUniform1fvARB = NULL;
PFNGLUNIFORM2FARBPROC glUniform2fARB = NULL;
PFNGLUNIFORM2FVARBPROC glUniform2fvARB = NULL;
PFNGLUNIFORM3FARBPROC glUniform3fARB = NULL;
PFNGLUNIFORM3FVARBPROC glUniform3fvARB = NULL;
PFNGLUNIFORM4FARBPROC glUniform4fARB = NULL;
PFNGLUNIFORM4FVARBPROC glUniform4fvARB = NULL;
PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB = NULL;
PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB = NULL;

/*
 */
void glext_init() {

#ifdef _WIN32
#define GET_PROC_ADDRESS(a,b) b = (a)wglGetProcAddress(#b)
#else
#define GET_PROC_ADDRESS(a,b) b = (a)glXGetProcAddressARB((const GLubyte*)#b)
#endif
	
	// stencil
	GET_PROC_ADDRESS(PFNGLACTIVESTENCILFACEEXTPROC,glActiveStencilFaceEXT);
	GET_PROC_ADDRESS(PFNGLSTENCILOPSEPARATEATIPROC,glStencilOpSeparateATI);
	GET_PROC_ADDRESS(PFNGLSTENCILFUNCSEPARATEATIPROC,glStencilFuncSeparateATI);
	
	// depth bounds test
	GET_PROC_ADDRESS(PFNGLDEPTHBOUNDSEXTPROC,glDepthBoundsEXT);
	
	// textures
	GET_PROC_ADDRESS(PFNGLACTIVETEXTUREARBPROC,glActiveTexture);
	GET_PROC_ADDRESS(PFNGLTEXIMAGE3DPROC,glTexImage3D);
	
	// arb programs
	GET_PROC_ADDRESS(PFNGLGENPROGRAMSARBPROC,glGenProgramsARB);
	GET_PROC_ADDRESS(PFNGLBINDPROGRAMARBPROC,glBindProgramARB);
	GET_PROC_ADDRESS(PFNGLDELETEPROGRAMSARBPROC,glDeleteProgramsARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMSTRINGARBPROC,glProgramStringARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4FARBPROC,glProgramEnvParameter4fARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMENVPARAMETER4FVARBPROC,glProgramEnvParameter4fvARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4FARBPROC,glProgramLocalParameter4fARB);
	GET_PROC_ADDRESS(PFNGLPROGRAMLOCALPARAMETER4FVARBPROC,glProgramLocalParameter4fvARB);
	
	// nv programs
	GET_PROC_ADDRESS(PFNGLGENPROGRAMSNVPROC,glGenProgramsNV);
	GET_PROC_ADDRESS(PFNGLBINDPROGRAMNVPROC,glBindProgramNV);
	GET_PROC_ADDRESS(PFNGLDELETEPROGRAMSNVPROC,glDeleteProgramsNV);
	GET_PROC_ADDRESS(PFNGLLOADPROGRAMNVPROC,glLoadProgramNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMNAMEDPARAMETER4FNVPROC,glProgramNamedParameter4fNV);
	GET_PROC_ADDRESS(PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC,glProgramNamedParameter4fvNV);
	
	// attrib arrays
	GET_PROC_ADDRESS(PFNGLENABLEVERTEXATTRIBARRAYARBPROC,glEnableVertexAttribArrayARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIBPOINTERARBPROC,glVertexAttribPointerARB);
	GET_PROC_ADDRESS(PFNGLDISABLEVERTEXATTRIBARRAYARBPROC,glDisableVertexAttribArrayARB);
	GET_PROC_ADDRESS(PFNGLGETATTRIBLOCATIONARBPROC,glGetAttribLocationARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB1FARBPROC,glVertexAttrib1fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FVARBPROC,glVertexAttrib2fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB2FARBPROC,glVertexAttrib2fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FVARBPROC,glVertexAttrib3fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB3FARBPROC,glVertexAttrib3fARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FVARBPROC,glVertexAttrib4fvARB);
	GET_PROC_ADDRESS(PFNGLVERTEXATTRIB4FARBPROC,glVertexAttrib4fARB);
	
	// vertex buffer object
	GET_PROC_ADDRESS(PFNGLGENBUFFERSARBPROC,glGenBuffersARB);
	GET_PROC_ADDRESS(PFNGLDELETEBUFFERSARBPROC,glDeleteBuffersARB);
	GET_PROC_ADDRESS(PFNGLBINDBUFFERARBPROC,glBindBufferARB);
	GET_PROC_ADDRESS(PFNGLBUFFERDATAARBPROC,glBufferDataARB);
	GET_PROC_ADDRESS(PFNGLMAPBUFFERARBPROC,glMapBufferARB);
	GET_PROC_ADDRESS(PFNGLUNMAPBUFFERARBPROC,glUnmapBufferARB);
	
	// occlision query
	GET_PROC_ADDRESS(PFNGLGENQUERIESARBPROC,glGenQueriesARB);
	GET_PROC_ADDRESS(PFNGLDELETEQUERIESARBPROC,glDeleteQueriesARB);
	GET_PROC_ADDRESS(PFNGLBEGINQUERYARBPROC,glBeginQueryARB);
	GET_PROC_ADDRESS(PFNGLENDQUERYARBPROC,glEndQueryARB);
	GET_PROC_ADDRESS(PFNGLGETQUERYOBJECTUIVARBPROC,glGetQueryObjectuivARB);
	
	// glsl
	GET_PROC_ADDRESS(PFNGLCREATEPROGRAMOBJECTARBPROC,glCreateProgramObjectARB);
	GET_PROC_ADDRESS(PFNGLCREATESHADEROBJECTARBPROC,glCreateShaderObjectARB);
	GET_PROC_ADDRESS(PFNGLSHADERSOURCEARBPROC,glShaderSourceARB);
	GET_PROC_ADDRESS(PFNGLCOMPILESHADERARBPROC,glCompileShaderARB);
	GET_PROC_ADDRESS(PFNGLATTACHOBJECTARBPROC,glAttachObjectARB);
	GET_PROC_ADDRESS(PFNGLDELETEOBJECTARBPROC,glDeleteObjectARB);
	GET_PROC_ADDRESS(PFNGLBINDATTRIBLOCATIONARBPROC,glBindAttribLocationARB);
	GET_PROC_ADDRESS(PFNGLLINKPROGRAMARBPROC,glLinkProgramARB);
	GET_PROC_ADDRESS(PFNGLGETINFOLOGARBPROC,glGetInfoLogARB);
	GET_PROC_ADDRESS(PFNGLGETOBJECTPARAMETERIVARBPROC,glGetObjectParameterivARB);
	GET_PROC_ADDRESS(PFNGLVALIDATEPROGRAMARBPROC,glValidateProgramARB);
	GET_PROC_ADDRESS(PFNGLUSEPROGRAMOBJECTARBPROC,glUseProgramObjectARB);
	GET_PROC_ADDRESS(PFNGLGETUNIFORMLOCATIONARBPROC,glGetUniformLocationARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM1IARBPROC,glUniform1iARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM1FARBPROC,glUniform1fARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM1FVARBPROC,glUniform1fvARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM2FARBPROC,glUniform2fARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM2FVARBPROC,glUniform2fvARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM3FARBPROC,glUniform3fARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM3FVARBPROC,glUniform3fvARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM4FARBPROC,glUniform4fARB);
	GET_PROC_ADDRESS(PFNGLUNIFORM4FVARBPROC,glUniform4fvARB);
	GET_PROC_ADDRESS(PFNGLUNIFORMMATRIX3FVARBPROC,glUniformMatrix3fvARB);
	GET_PROC_ADDRESS(PFNGLUNIFORMMATRIX4FVARBPROC,glUniformMatrix4fvARB);
	
#undef GET_PROC_ADDRESS
}
